# -*- coding: utf-8 -*-
"""keras_resnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18dBnxZByVQVAX72gdczlrb9BMQcv3Y4M
"""
from tensorflow.keras import Model
from tensorflow.keras.layers import Add, Input, Dense, Activation, Flatten, Dropout
from tensorflow.keras.layers import ZeroPadding2D, Conv2D, MaxPooling2D, BatchNormalization, AveragePooling2D
from tensorflow.keras.initializers import glorot_uniform

# ResNet: conv block

def conv_block(input_tensor, kernel_size, filters, stride, stage):
  filter1, filter2, filter3 = filters
  s_name = "res_stage_" + str(stage) + "_conv_block_"
  
  # shortcut path
  shortcut = input_tensor
  res_shortcut = Conv2D(filters=filter3,
                        kernel_size = (1, 1),
                        strides=(stride, stride),
                        name = s_name + "shortcut_conv2d",
                        kernel_initializer = glorot_uniform(seed=0))(shortcut)
  res_shortcut = BatchNormalization(axis=3, 
                                    name = s_name + "shortcut_bn")(res_shortcut)
  # res_shortcut = Activation('relu')(res_shortcut)
  
  # normal path
  # Block 1
  res_normal = Conv2D(filters=filter1,
                      kernel_size = (1, 1),
                      strides=(stride, stride),
                      name = s_name + "1_conv2d",
                      kernel_initializer = glorot_uniform(seed=0))(input_tensor)
  res_normal = BatchNormalization(axis=3, 
                                  name = s_name + "1_bn")(res_normal)
  res_normal = Activation('relu')(res_normal)
  
  # Block 2
  res_normal = Conv2D(filters=filter2,
                      kernel_size = (kernel_size, kernel_size),
                      padding = 'same',
                      name = s_name + "2_conv2d",
                      kernel_initializer = glorot_uniform(seed=0))(res_normal)
  res_normal = BatchNormalization(axis=3, 
                                  name = s_name + "2_bn")(res_normal)
  res_normal = Activation('relu')(res_normal)
  
  # Block 3
  res_normal = Conv2D(filters=filter3,
                      kernel_size = (1, 1),
                      name = s_name + "3_conv2d",
                      kernel_initializer = glorot_uniform(seed=0))(res_normal)
  res_normal = BatchNormalization(axis=3, 
                                  name = s_name + "3_bn")(res_normal)
  
  res = Add()([res_normal, res_shortcut])
  res = Activation('relu')(res)

  return res

# ResNet: ID block

def id_block(input_tensor, kernel_size, filters, stage):
  filter1, filter2, filter3 = filters
  s_name = "res_stage_" + str(stage) + "_id_block_"
  
  # normal path
  
  # Block 1
  res_normal = Conv2D(filters=filter1,
                      kernel_size = (1, 1),
                      name = s_name + "1_conv2d",
                      kernel_initializer = glorot_uniform(seed=0))(input_tensor)
  res_normal = BatchNormalization(axis=3, 
                                  name = s_name + "1_bn")(res_normal)
  res_normal = Activation('relu')(res_normal)
  
  # Block 2
  res_normal = Conv2D(filters=filter2,
                      kernel_size = kernel_size,
                      padding = 'same',
                      name = s_name + "2_conv2d",
                      kernel_initializer = glorot_uniform(seed=0))(res_normal)
  res_normal = BatchNormalization(axis=3, 
                                  name = s_name + "2_bn")(res_normal)
  res_normal = Activation('relu')(res_normal)
  
  # Block 3
  res_normal = Conv2D(filters=filter3,
                      kernel_size = (1, 1),
                      name = s_name + "3_conv2d",
                      kernel_initializer = glorot_uniform(seed=0))(res_normal)
  res_normal = BatchNormalization(axis=3, 
                                  name = s_name + "3_bn")(res_normal)
  
  res = Add()([res_normal, input_tensor])
  res = Activation('relu')(res)
  
  return res

# ResNet: stage 1 - stage 5

def ResNet(input_shape, classes):
  _input = Input(shape=input_shape)
  res = ZeroPadding2D([3, 3])(_input)
  
  # stage 1
  res = Conv2D(filters = 64, 
               kernel_size = (7, 7), 
               strides = (2, 2),
               name = "res_stage_1_conv",
               kernel_initializer = glorot_uniform(seed=0))(res)
  res = BatchNormalization(axis = 3, 
                           name = "res_stage_1_BN")(res)
  res = Activation('relu')(res)
  res = MaxPooling2D((3, 3), strides=(2, 2))(res)

  # stage 2
  res = conv_block(input_tensor = res,
                   kernel_size = 3,
                   filters = [64, 64, 256],
                   stride = 1,
                   stage = "2a")

  res = id_block(input_tensor = res,
                kernel_size = 3,
                filters = [64, 64, 256],
                stage = "2b")
  res = id_block(input_tensor = res,
                 kernel_size = 3,
                 filters = [64, 64, 256],
                 stage = "2c")
  # stage 3
  res = conv_block(input_tensor = res,
                   kernel_size = 3,
                   filters = [128, 128, 512],
                   stride = 2,
                   stage = "3a")
  res = id_block(input_tensor = res,
                kernel_size = 3,
                filters = [128, 128, 512],
                stage = "3b")
  res = id_block(input_tensor = res,
                 kernel_size = 3,
                 filters = [128, 128, 512],
                 stage = "3c")
  res = id_block(input_tensor = res,
                 kernel_size = 3,
                 filters = [128, 128, 512],
                 stage = "3d") 
  
  # stage 4
  res = conv_block(input_tensor = res,
                   kernel_size = 3,
                   filters = [256, 256, 1024],
                   stride = 2,
                   stage = "4a")
  res = id_block(input_tensor = res,
                kernel_size = 3,
                filters = [256, 256, 1024],
                stage = "4b")
  res = id_block(input_tensor = res,
                 kernel_size = 3,
                 filters = [256, 256, 1024],
                 stage = "4c")
  res = id_block(input_tensor = res,
                 kernel_size = 3,
                 filters = [256, 256, 1024],
                 stage = "4d") 
  res = id_block(input_tensor = res,
                 kernel_size = 3,
                 filters = [256, 256, 1024],
                 stage = "4e")
  res = id_block(input_tensor = res,
                 kernel_size = 3,
                 filters = [256, 256, 1024],
                 stage = "4f") 
  
  
  # stage 5
  # res = conv_block(input_tensor = res,
  #                  kernel_size = 3,
  #                  filters = [512, 512, 2048],
  #                  stride = 2,
  #                  stage = "5a")
  # res = id_block(input_tensor = res,
  #               kernel_size = 3,
  #               filters = [512, 512, 2048],
  #               stage = "5b")
  # res = id_block(input_tensor = res,
  #                kernel_size = 3,
  #                filters = [512, 512, 2048],
  #                stage = "5c")
  res = AveragePooling2D(pool_size=(2,2), 
                         padding='same')(res)
  
  res = Flatten()(res)
  res = Dropout(0.5)(res)
  res = Dense(classes, 
              activation='softmax', 
              name='output_fc_layer', 
              kernel_initializer = glorot_uniform(seed=0))(res)
    
  model = Model(inputs = _input, outputs = res, name='ResNet')

  return model
